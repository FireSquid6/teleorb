name: Release New Version
on:
  push:
    tags:
      - "*"

jobs:
  # job id, can be anything
  export_game:
    # Always use ubuntu-latest for this action
    runs-on: ubuntu-latest
    # Add permission for release creation. Can be made narrower according to your needs
    permissions: write-all
    # Job name, can be anything
    name: Export Game
    steps:
      # Always include the checkout step so that
      # your project is available for Godot to export
      - name: checkout
        uses: actions/checkout@v3.3.0

      - name: export game
        id: export
        # Use latest version (see releases for all versions)
        uses: firebelley/godot-export@v5.2.0
        with:
          # Defining all the required inputs
          godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/4.2/Godot_v4.2-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/4.2/Godot_v4.2-stable_export_templates.tpz
          relative_project_path: ./game
          archive_output: true

        # This release action has worked well for me. However, you can most likely use any release action of your choosing.
        # https://github.com/ncipollo/release-action
      - name: create release
        uses: ncipollo/release-action@v1.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          tag: ${{ github.ref_name }}
          artifacts: ${{ steps.export.outputs.archive_directory }}/*
  push_registry:
    runs-on: ubuntu-latest
    name: Push gameserver container to registry
    permissions: read-all
    steps:
      - name: checkout
        uses: actions/checkout@v3.3.0
      - name: install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITAL_OCEAN_ACCESS_TOKEN }}
      - name: log in to DO registry
        run: doctl registry login --expiry-seconds 600
      - name: go to correct directory
        run: "cd server"
      - name: build image
        run: docker build --pull -t registry.digitalocean.com/teleorb/server:${{ github.ref_name }} .
      - name: push image
        run: docker push registry.digitalocean.com/teleorb/server:${{ github.ref_name }}
