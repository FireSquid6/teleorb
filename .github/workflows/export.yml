# add a meaningless comment
name: export project and create release

on: 
  pull_request:
    branches:
      - "release"

jobs:
  # job id, can be anything
  export_game:
    # Always use ubuntu-latest for this action
    runs-on: ubuntu-latest
    # Job name, can be anything
    name: Export Game
    steps:
      # Always include the checkout step so that 
      # your project is available for Godot to export
    - name: checkout
      uses: actions/checkout@v3.0.2
      # Ensure that you get the entire project history
      with:
        fetch-depth: 0
  
    # Automatically stores the tag name for later use
    - name: get version from version.txt
      id: tag_version
      uses: juliangruber/read-file-action@v1
      with:
        path: ./version.txt
  
    - name: export game
      id: export
      # Use latest version (see releases for all versions)
      uses: firebelley/godot-export@v4.2.0
      with:
        # Defining all the required inputs
        godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/4.0/beta2/Godot_v4.0-beta2_linux.x86_64.zip
        godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/4.0/beta2/Godot_v4.0-beta2_export_templates.tpz
        relative_project_path: ./src
        archive_output: true
        use_godot_4: true
    
    - name: get patch notes 
      id: patch_notes
      uses: juliangruber/read-file-action@v1
      with:
        path: ./patch-notes.md

      # This release action has worked well for me. However, you can most likely use any release action of your choosing.
      # https://github.com/softprops/action-gh-release
    - name: create release
      uses: softprops/action-gh-release@v0.1.14
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        generate_release_notes: true
        tag_name: ${{ steps.tag_version.outputs.content }}
        files: ${{ steps.export.outputs.archive_directory }}/*
        append_body: ${{ steps.patch_notes.outputs.content }}

